local Fluent = loadstring(game:HttpGet("https://raw.githubusercontent.com/discoart/FluentPlus/refs/heads/main/release.lua"))()

local theme = "Dark"
local Window = Fluent:CreateWindow({
    Title = "Moonlight Hub | Grow A Garden",
    SubTitle = "By Nakhun",
    TabWidth = 160,
    Size = UDim2.fromOffset(520, 400),
    Acrylic = true,
    Theme = theme,
    MinimizeKey = Enum.KeyCode.RightShift
})

local player = game.Players.LocalPlayer
local RunService = game:GetService("RunService")
local VirtualUser = game:GetService("VirtualUser")

-- Anti-AFK
player.Idled:Connect(function()
    VirtualUser:Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
    task.wait(1)
    VirtualUser:Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
end)

local autoFarm = false
local noclipEnabled = false
local autoWalkToPlant = true

local function getOwnedPlot()
    for _, plot in pairs(workspace.Farm:GetChildren()) do
        local important = plot:FindFirstChild("Important") or plot:FindFirstChild("Importanert")
        if important then
            local data = important:FindFirstChild("Data")
            if data and data:FindFirstChild("Owner") and data.Owner.Value == player.Name then
                return plot
            end
        end
    end
    return nil
end

-- Tabs
local mainTab = Window:AddTab({ Title = "Main", Icon = "rbxassetid://6026568198" })
local teleportTab = Window:AddTab({ Title = "Teleports", Icon = "rbxassetid://6026568227" })
local miscTab = Window:AddTab({ Title = "Misc", Icon = "rbxassetid://6026568235" })
local settingsTab = Window:AddTab({ Title = "Settings", Icon = "rbxassetid://6031265976" })

-- Autofarm toggle
mainTab:AddToggle({
    Title = "Autofarm (Collect + Walk)",
    Default = false,
    Callback = function(v)
        autoFarm = v
    end
})

-- Noclip toggle
mainTab:AddToggle({
    Title = "Noclip",
    Default = false,
    Callback = function(v)
        noclipEnabled = v
    end
})

-- Teleport buttons
teleportTab:AddButton({
    Title = "Teleport to Gear Shop",
    Callback = function()
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = CFrame.new(-285.41, 2.77, -13.98)
            Fluent:Notify({ Title = "Teleported", Content = "You have been teleported to the Gear Shop!" })
        end
    end
})

teleportTab:AddButton({
    Title = "Harvest Event",
    Callback = function()
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.CFrame = CFrame.new(-104.78, 4.4, -11.4)
            Fluent:Notify({ Title = "Teleported", Content = "You have been teleported to the Harvest Event!" })
        end
    end
})

-- Teleport to player dropdown
local playerList = {}
for _, plr in ipairs(game.Players:GetPlayers()) do
    if plr ~= player then
        table.insert(playerList, plr.Name)
    end
end

teleportTab:AddDropdown({
    Title = "Teleport to Player",
    Values = playerList,
    Multi = false,
    Default = nil,
    Callback = function(selected)
        local target = game.Players:FindFirstChild(selected)
        local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") and hrp then
            hrp.CFrame = target.Character.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)
            Fluent:Notify({ Title = "Teleported", Content = "Teleported to " .. selected })
        else
            Fluent:Notify({ Title = "Error", Content = "Failed to teleport to player." })
        end
    end
})

-- Free Robux prank
miscTab:AddButton({
    Title = "Free Robux",
    Callback = function()
        player:Kick("No Robux for you ;d")
    end
})

-- Theme switch
settingsTab:AddToggle({
    Title = "Dark Mode",
    Default = true,
    Callback = function(state)
        Fluent:SetTheme(state and "Dark" or "Light")
    end
})

-- Autofarm loop
task.spawn(function()
    while true do
        RunService.Heartbeat:Wait()
        if autoFarm then
            local plot = getOwnedPlot()
            if plot then
                local important = plot:FindFirstChild("Important")
                if important then
                    local farm = important:FindFirstChild("Plants_Physical")
                    if farm then
                        for _, prompt in pairs(farm:GetDescendants()) do
                            if prompt:IsA("ProximityPrompt") then
                                local rootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                                if rootPart then
                                    local dist = (rootPart.Position - prompt.Parent.Position).Magnitude
                                    if dist <= 20 then
                                        prompt.Exclusivity = Enum.ProximityPromptExclusivity.AlwaysShow
                                        prompt.MaxActivationDistance = 100
                                        prompt.RequiresLineOfSight = false
                                        prompt.Enabled = true
                                        fireproximityprompt(prompt, 1, true)
                                    elseif autoWalkToPlant then
                                        local humanoid = player.Character and player.Character:FindFirstChild("Humanoid")
                                        if humanoid then
                                            humanoid:MoveTo(prompt.Parent.Position + Vector3.new(0, 5, 0))
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        else
            task.wait(0.5)
        end
    end
end)

-- Noclip loop
task.spawn(function()
    while true do
        RunService.Heartbeat:Wait()
        local character = player.Character
        if character then
            for _, part in pairs(character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = not noclipEnabled
                end
            end
        end
        if not noclipEnabled then
            task.wait(0.5)
        end
    end
end)
